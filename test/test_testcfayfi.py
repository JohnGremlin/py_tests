# Generated by Selenium IDE
import chromedriver_binary
import time
import pytest

from selenium import webdriver
from selenium.webdriver import ActionChains
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as ec
from termcolor import colored


@pytest.mark.repeat(1100)
class TestUpVotes:
    def setup_method(self, method):
        self.vars = {}
        self.driver = webdriver.Firefox()

    def teardown_method(self, method):
        driver = self.driver
        driver.quit()

    def test_up_votes(self):
        driver = self.driver
        driver.get("https://www.dsnews.ua/biznes_lady")
        time.sleep(1)
        finance_block = driver.find_element(By.XPATH, '//*[@id="adpartner_branding"]/main/div/h2[8]')
        feedback_btn = driver.find_element(By.CSS_SELECTOR, ".btn-voice[data-id='365983']")
        actions = ActionChains(driver)
        actions.move_to_element(finance_block).perform()
        feedback_btn.click()
        try:
            driver.find_element(By.CSS_SELECTOR, ".swal-button").click()
        except NoSuchElementException:
            print(colored("\nNo Notification message", 'red'))
            pass
        finally:
            print(colored("\nEnd of vote", 'green'))
            return True

    def test_up_votes_v2(self):
        driver = self.driver
        driver.get("https://www.dsnews.ua/biznes_lady")
        time.sleep(2)
        finance_block = driver.find_element(By.XPATH, '//*[@id="adpartner_branding"]/main/div/h2[8]')
        feedback_btn = driver.find_element(By.CSS_SELECTOR, ".btn-voice[data-id='365983']")
        actions = ActionChains(driver)
        actions.move_to_element(finance_block).perform()
        feedback_btn.click()
        try:
            driver.find_element(By.CSS_SELECTOR, ".swal-button").click()
        except NoSuchElementException:
            print(colored("\nNo Notification message", 'red'))
            pass
        finally:
            print(colored("\nEnd of vote", 'green'))
            return True
